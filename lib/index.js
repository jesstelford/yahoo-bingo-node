// Generated by CoffeeScript 2.0.0-beta7
void function () {
  var _, BOARD_HEIGHT, BOARD_WIDTH, client, io, numbers, sequences, SOCKET_SERVER, TL_BR_DIAGONAL_INDEX, TR_BL_DIAGONAL_INDEX, tryAgain;
  BOARD_WIDTH = 5;
  BOARD_HEIGHT = 5;
  TL_BR_DIAGONAL_INDEX = BOARD_WIDTH + BOARD_HEIGHT;
  TR_BL_DIAGONAL_INDEX = BOARD_WIDTH + BOARD_HEIGHT + 1;
  SOCKET_SERVER = 'ws://yahoobingo.herokuapp.com';
  io = require('socket.io-client');
  _ = require('underscore');
  client = io.connect(SOCKET_SERVER);
  sequences = void 0;
  numbers = void 0;
  tryAgain = false;
  client.on('connect', function () {
    console.log('Connected to ', SOCKET_SERVER);
    return client.emit('register', {
      name: 'Jess Telford',
      email: 'jess+yahoobingo@jes.st',
      url: 'https://github.com/jesstelford/yahoo-bingo-node'
    });
  });
  client.on('card', function (payload) {
    var colIndex;
    console.log('Card received: ', payload);
    sequences = function (accum$) {
      var i;
      for (var cache$ = function () {
            var accum$1;
            accum$1 = [];
            for (var i$ = 0; 0 <= BOARD_WIDTH + BOARD_HEIGHT + 1 ? i$ <= BOARD_WIDTH + BOARD_HEIGHT + 1 : i$ >= BOARD_WIDTH + BOARD_HEIGHT + 1; 0 <= BOARD_WIDTH + BOARD_HEIGHT + 1 ? ++i$ : --i$)
              accum$1.push(i$);
            return accum$1;
          }.apply(this, arguments), i$ = 0, length$ = cache$.length; i$ < length$; ++i$) {
        i = cache$[i$];
        accum$.push(0);
      }
      return accum$;
    }.call(this, []);
    numbers = {};
    colIndex = 0;
    return _(payload.slots).each(function (columnOfNumbers, columnLetter) {
      var rowIndex;
      rowIndex = 0;
      _(columnOfNumbers).each(function (number) {
        var numberKey;
        numberKey = '' + columnLetter + number;
        if (null != numbers[numberKey])
          numbers[numberKey];
        else
          numbers[numberKey] = [];
        numbers[numberKey].push(colIndex);
        numbers[numberKey].push(BOARD_HEIGHT + rowIndex);
        if (colIndex === rowIndex)
          numbers[numberKey].push(TL_BR_DIAGONAL_INDEX);
        if (colIndex + 1 === BOARD_WIDTH - rowIndex)
          numbers[numberKey].push(TR_BL_DIAGONAL_INDEX);
        return rowIndex++;
      });
      return colIndex++;
    });
  });
  client.on('number', function (number) {
    var hit;
    hit = false;
    _(numbers[number]).each(function (sequenceIndex) {
      if (!(null != sequences[sequenceIndex]))
        return;
      hit = true;
      sequences[sequenceIndex]++;
      if (sequences[sequenceIndex] >= BOARD_WIDTH) {
        client.emit('bingo');
        return sequences[sequenceIndex] = void 0;
      }
    });
    numbers[number] = void 0;
    return console.log('Number received: ', number, '... ', hit ? 'HIT' : 'MISS');
  });
  client.on('win', function (message) {
    console.log('WIN!', message);
    return tryAgain = false;
  });
  client.on('lose', function (message) {
    console.log('LOSE!', message);
    return tryAgain = true;
  });
  client.on('disconnect', function () {
    if (tryAgain) {
      console.log('Trying again!');
      process.nextTick(function () {
        return client = io.connect('ws://yahoobingo.herokuapp.com');
      });
      return tryAgain = false;
    } else {
      console.log('Bye!');
      return process.exit();
    }
  });
}.call(this);
